(defmacro validate (function)
    (let* ( (function_name (second function))
            (args (car (cddr function)))
            (validArgs '(x y z))
            (verdict "")
            (f (char-int (char (string function_name) 0)))
        )

        ( if (not (and (>= f 65) (<= f 90)) )
            (setq verdict (concatenate 'string verdict (format nil "~%Function name invalid: ~a is not an atom.~%" function_name)))
            (setq verdict (concatenate 'string verdict (format nil "~%Function name valid: ~a is an atom.~%" function_name)))
        )

        ( dolist (item args)
            (if (not (find item validArgs))
            (setq verdict (concatenate 'string verdict (format nil "Arguments Invalid: ~a~%" item)))
            (setq verdict (concatenate 'string verdict (format nil "Arguments Valid: ~a~%" item)))
            )
        )

        ( if (= (length verdict) 0)
            (format t "This is a valid function. No errors detected~%")
            (format t "Function validation: ~a~%" verdict)
        )
    )
)

(validate (defun main (x z) …))
(validate (defun reverselist345 (x ) …))
(validate (defun 12stacktop (z x a b) …))
(validate (defun queuepop (x y) …))